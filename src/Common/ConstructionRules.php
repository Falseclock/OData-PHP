<?php

namespace Falseclock\OData\Common;

class ConstructionRules
{
	public $odataUri         = '<serviceRoot>(<odataRelativeUri>){0,1}';
	public $serviceRoot      = '(?: (https|http)\://<host>(\:<port>){0,1}/(<segment-nz>/)*)';
	public $odataRelativeUri = '(?: \$batch(\?<batchOptions>){0,1}|\$entity\?<entityOptions>|\$entity/<optionallyQualifiedEntityTypeName>\?<entityCastOptions>|\$metadata(\?<metadataOptions>){0,1}(<context>){0,1}|<resourcePath>(\?<queryOptions>){0,1})';
	public $resourcePath                    = "(?: <entitySetName> (?: <collectionNavigation> )?  ) | (?: <singletonEntity> (?: <singleNavigation> )?  ) | <actionImportCall> | (?: <entityColFunctionImportCall> (?: <collectionNavigation> )?  ) | (?: <entityFunctionImportCall> (?: <singleNavigation> )?  ) | (?: <complexColFunctionImportCall> (?: <complexColPath> )?  ) | (?: <complexFunctionImportCall> (?: <complexPath> )?  ) | (?: <primitiveColFunctionImportCall> (?: <primitiveColPath> )?  ) | (?: <primitiveFunctionImportCall> (?: <primitivePath> )?  ) | (?: <functionImportCallNoParens> (?: <querySegment> )?  ) | (?: <crossjoin> (?: <querySegment> )?  ) | (?: \$all (?: (?: \/<optiQualifiedEntityTypeName> ) )?  )";
	public $collectionNavigation            = "(?:  (?: (?: \/<optiQualifiedEntityTypeName> ) )?  (?: <collectionNavPath> )?  )";
	public $collectionNavPath               = "(?: <keyPredicate> (?: <singleNavigation> )?  ) | (?: <filterInPath> (?: <collectionNavigation> )?  ) | (?: <each> (?: <boundOperation> )?  ) | <boundOperation> | <count> | <ref> | <querySegment>";
	public $keyPredicate                    = " <simpleKey> | <compoundKey> | <keyPathSegments>";
	public $simpleKey                       = "(?: <OPEN><parameterAlias> | <keyPropertyValue><CLOSE> )";
	public $compoundKey                     = "(?: <OPEN><keyValuePair> (?: (?: <COMMA><keyValuePair> ) )* <CLOSE> )";
	public $keyValuePair                    = "(?: <primitiveKeyProperty> | <keyPropertyAlias><EQ><parameterAlias> | <keyPropertyValue> )";
	public $keyPropertyValue                = " <primitiveLiteral>";
	public $keyPropertyAlias                = " <odataIdentifier>";
	public $keyPathSegments                 = " (?: (?: \/<keyPathLiteral> ) )+ ";
	public $keyPathLiteral                  = " (?: <pchar> )* ";
	public $singleNavigation                = "(?:  (?: (?: \/<optiQualifiedEntityTypeName> ) )?  (?: (?: \/<propertyPath> ) | <boundOperation> | <ref> | <value> | <querySegment> )?  )";
	public $propertyPath                    = "(?: <entityColNavigationProperty> (?: <collectionNavigation> )?  ) | (?: <entityNavigationProperty> (?: <singleNavigation> )?  ) | (?: <complexColProperty> (?: <complexColPath> )?  ) | (?: <complexProperty> (?: <complexPath> )?  ) | (?: <primitiveColProperty> (?: <primitiveColPath> )?  ) | (?: <primitiveProperty> (?: <primitivePath> )?  ) | (?: <streamProperty> (?: <boundOperation> )?  )";
	public $primitiveColPath                = " <count> | <boundOperation> | <ordinalIndex> | <querySegment>";
	public $primitivePath                   = " <value> | <boundOperation> | <querySegment>";
	public $complexColPath                  = " <ordinalIndex> | (?:  (?: (?: \/<optiQualifiedComplexTypeName> ) )?  (?: <count> | <boundOperation> | <querySegment> )?  )";
	public $complexPath                     = "(?:  (?: (?: \/<optiQualifiedComplexTypeName> ) )?  (?: (?: \/<propertyPath> ) | <boundOperation> | <querySegment> )?  )";
	public $filterInPath                    = "(?: \/\$filter<OPEN><boolCommonExpr><CLOSE> )";
	public $each                            = "\/\$each";
	public $count                           = "\/\$count";
	public $ref                             = "\/\$ref";
	public $value                           = "\/\$value";
	public $querySegment                    = "\/\$query";
	public $ordinalIndex                    = "(?: \/ (?: <DIGIT> )+  )";
	public $boundOperation                  = "(?: \/<boundActionCall> | (?: <boundEntityColFunctionCall> (?: <collectionNavigation> )?  ) | (?: <boundEntityFunctionCall> (?: <singleNavigation> )?  ) | (?: <boundComplexColFunctionCall> (?: <complexColPath> )?  ) | (?: <boundComplexFunctionCall> (?: <complexPath> )?  ) | (?: <boundPrimitiveColFunctionCall> (?: <primitiveColPath> )?  ) | (?: <boundPrimitiveFunctionCall> (?: <primitivePath> )?  ) | (?: <boundFunctionCallNoParens> (?: <querySegment> )?  ) )";
	public $actionImportCall                = " <actionImport>";
	public $boundActionCall                 = "(?:  (?: (?: <namespace>\. ) )? <action> )";
	public $boundEntityFunctionCall         = "(?:  (?: (?: <namespace>\. ) )? <entityFunction><functionParameters> )";
	public $boundEntityColFunctionCall      = "(?:  (?: (?: <namespace>\. ) )? <entityColFunction><functionParameters> )";
	public $boundComplexFunctionCall        = "(?:  (?: (?: <namespace>\. ) )? <complexFunction><functionParameters> )";
	public $boundComplexColFunctionCall     = "(?:  (?: (?: <namespace>\. ) )? <complexColFunction><functionParameters> )";
	public $boundPrimitiveFunctionCall         = "(?:  (?: (?: <namespace>\. ) )? <primitiveFunction><functionParameters> )";
	public $boundPrimitiveColFunctionCall      = "(?:  (?: (?: <namespace>\. ) )? <primitiveColFunction><functionParameters> )";
	public $boundFunctionCallNoParens          = "(?:  (?: (?: <namespace>\. ) )? <entityFunction> ) | (?:  (?: (?: <namespace>\. ) )? <entityColFunction> ) | (?:  (?: (?: <namespace>\. ) )? <complexFunction> ) | (?:  (?: (?: <namespace>\. ) )? <complexColFunction> ) | (?:  (?: (?: <namespace>\. ) )? <primitiveFunction> ) | (?:  (?: (?: <namespace>\. ) )? <primitiveColFunction> )";
	public $entityFunctionImportCall           = "(?: <entityFunctionImport><functionParameters> )";
	public $entityColFunctionImportCall     = "(?: <entityColFunctionImport><functionParameters> )";
	public $complexFunctionImportCall       = "(?: <complexFunctionImport><functionParameters> )";
	public $complexColFunctionImportCall    = "(?: <complexColFunctionImport><functionParameters> )";
	public $primitiveFunctionImportCall     = "(?: <primitiveFunctionImport><functionParameters> )";
	public $primitiveColFunctionImportCall  = "(?: <primitiveColFunctionImport><functionParameters> )";
	public $functionImportCallNoParens      = " <entityFunctionImport> | <entityColFunctionImport> | <complexFunctionImport> | <complexColFunctionImport> | <primitiveFunctionImport> | <primitiveColFunctionImport>";
	public $functionParameters              = "(?: <OPEN> (?: (?: <functionParameter> (?: (?: <COMMA><functionParameter> ) )*  ) )? <CLOSE> )";
	public $functionParameter               = "(?: <parameterName><EQ><parameterAlias> | <primitiveLiteral> )";
	public $parameterName                   = " <odataIdentifier>";
	public $parameterAlias                  = "(?: <AT><odataIdentifier> )";
	public $crossjoin                       = "(?: \$crossjoin<OPEN><entitySetName> (?: (?: <COMMA><entitySetName> ) )* <CLOSE> )";
	public $queryOptions                    = "(?: <queryOption> (?: (?: \&<queryOption> ) )*  )";
	public $queryOption                     = " <systemQueryOption> | <aliasAndValue> | <nameAndValue> | <customQueryOption>";
	public $batchOptions                    = "(?: <batchOption> (?: (?: \&<batchOption> ) )*  )";
	public $batchOption                     = " <format> | <customQueryOption>";
	public $metadataOptions                 = "(?: <metadataOption> (?: (?: \&<metadataOption> ) )*  )";
	public $metadataOption                  = " <format> | <customQueryOption>";
	public $entityOptions                   = "(?:  (?: (?: <entityIdOption>\& ) )* <id> (?: (?: \&<entityIdOption> ) )*  )";
	public $entityIdOption                  = " <format> | <customQueryOption>";
	public $entityCastOptions               = "(?:  (?: (?: <entityCastOption>\& ) )* <id> (?: (?: \&<entityCastOption> ) )*  )";
	public $entityCastOption                = " <entityIdOption> | <expand> | <select>";
	public $id                              = "(?: \$id | id<EQ><IRI_in_query> )";
	public $systemQueryOption               = " <compute> | <deltatoken> | <expand> | <filter> | <format> | <id> | <inlinecount> | <orderby> | <schemaversion> | <search> | <select> | <skip> | <skiptoken> | <top> | <index>";
	public $compute                         = "(?: \$compute | compute<EQ><computeItem> (?: (?: <COMMA><computeItem> ) )*  )";
	public $computeItem                     = "(?: <commonExpr><RWS>as<RWS><computedProperty> )";
	public $computedProperty                = " <odataIdentifier>";
	public $expand                          = "(?: \$expand | expand<EQ><expandItem> (?: (?: <COMMA><expandItem> ) )*  )";
	public $expandItem                      = "\$value | <expandPath> | (?: <optiQualifiedEntityTypeName>\/<expandPath> )";
	public $expandPath                      = "(?:  (?: (?: <complexProperty> | <complexColProperty> | <optiQualifiedComplexTypeName> | <complexAnnotationInQuery>\/ ) )* (?: <STAR> (?: <ref> | (?: <OPEN><levels><CLOSE> ) )?  ) | <streamProperty> | (?: <navigationProperty> | <entityAnnotationInQuery> (?: (?: \/<optiQualifiedEntityTypeName> ) )?  (?: (?: <ref> (?: (?: <OPEN><expandRefOption> (?: (?: <SEMI><expandRefOption> ) )* <CLOSE> ) )?  ) | (?: <count> (?: (?: <OPEN><expandCountOption> (?: (?: <SEMI><expandCountOption> ) )* <CLOSE> ) )?  ) | (?: <OPEN><expandOption> (?: (?: <SEMI><expandOption> ) )* <CLOSE> ) )?  ) )";
	public $expandCountOption               = " <filter> | <search>";
	public $expandRefOption                 = " <expandCountOption> | <orderby> | <skip> | <top> | <inlinecount>";
	public $expandOption                    = " <expandRefOption> | <select> | <expand> | <compute> | <levels> | <aliasAndValue>";
	public $levels                          = "(?: \$levels | levels<EQ>(?: <oneToNine> (?: <DIGIT> )*  ) | max )";
	public $filter                          = "(?: \$filter | filter<EQ><boolCommonExpr> )";
	public $orderby                         = "(?: \$orderby | orderby<EQ><orderbyItem> (?: (?: <COMMA><orderbyItem> ) )*  )";
	public $orderbyItem                     = "(?: <commonExpr> (?: (?: <RWS>asc | desc ) )?  )";
	public $skip                            = "(?: \$skip | skip<EQ> (?: <DIGIT> )+  )";
	public $top                                = "(?: \$top | top<EQ> (?: <DIGIT> )+  )";
	public $index                              = "(?: \$index | index<EQ> (?: <DIGIT> )+  )";
	public $format                             = "(?: \$format | format<EQ>atom | json | xml | (?:  (?: <pchar> )+ \/ (?: <pchar> )+  ) )";
	public $inlinecount                        = "(?: \$count | count<EQ><booleanValue> )";
	public $schemaversion                      = "(?: \$schemaversion | schemaversion<EQ><STAR> |  (?: <unreserved> )+  )";
	public $search                             = "(?: \$search | search<EQ><BWS><searchExpr> | <searchExpr_incomplete> )";
	public $searchExpr                         = "(?: <searchParenExpr> | <searchNegateExpr> | <searchPhrase> | <searchWord> (?: <searchOrExpr> | <searchAndExpr> )?  )";
	public $searchParenExpr                 = "(?: <OPEN><BWS><searchExpr><BWS><CLOSE> )";
	public $searchNegateExpr                = "(?: NOT<RWS><searchExpr> )";
	public $searchOrExpr                    = "(?: <RWS>OR<RWS><searchExpr> )";
	public $searchAndExpr                   = "(?: <RWS> (?: (?: AND<RWS> ) )? <searchExpr> )";
	public $searchPhrase                    = "(?: <quotation_mark> (?: <qchar_no_AMP_DQUOTE> | <SP> )+ <quotation_mark> )";
	public $searchWord                      = "(?: <searchChar> (?: <searchChar> | <SQUOTE> )*  )";
	public $searchChar                      = " <unreserved> | <pct_encoded_no_DQUOTE> | \! | \* | \+ | \, | \: | \@ | \/ | \? | \$ | \=";
	public $searchExpr_incomplete           = "(?: <SQUOTE> (?: <SQUOTE_in_string> | <qchar_no_AMP_SQUOTE> | <quotation_mark> | <SP> )* <SQUOTE> )";
	public $select                          = "(?: \$select | select<EQ><selectItem> (?: (?: <COMMA><selectItem> ) )*  )";
	public $selectItem                      = " <STAR> | <allOperationsInSchema> | <selectProperty> | <optionallyQualifiedActionName> | <optionallyQualifiedFunctionName> | (?: <optiQualifiedEntityTypeName> | <optiQualifiedComplexTypeName>\/<selectProperty> | <optionallyQualifiedActionName> | <optionallyQualifiedFunctionName> )";
	public $selectProperty                  = " <primitiveProperty> | <primitiveAnnotationInQuery> | (?: <primitiveColProperty> | <primitiveColAnnotationInQuery> (?: (?: <OPEN><selectOptionPC> (?: (?: <SEMI><selectOptionPC> ) )* <CLOSE> ) )?  ) | <navigationProperty> | (?: <selectPath> (?: (?: <OPEN><selectOption> (?: (?: <SEMI><selectOption> ) )* <CLOSE> ) | (?: \/<selectProperty> ) )?  )";
	public $selectPath                      = "(?: <complexProperty> | <complexColProperty> | <complexAnnotationInQuery> (?: (?: \/<optiQualifiedComplexTypeName> ) )?  )";
	public $selectOptionPC                  = " <filter> | <search> | <inlinecount> | <orderby> | <skip> | <top>";
	public $selectOption                    = " <selectOptionPC> | <compute> | <select> | <expand> | <aliasAndValue>";
	public $allOperationsInSchema           = "(?: <namespace>\.<STAR> )";
	public $optionallyQualifiedActionName   = "(?:  (?: (?: <namespace>\. ) )? <action> )";
	public $optionallyQualifiedFunctionName = "(?:  (?: (?: <namespace>\. ) )? <function> (?: (?: <OPEN><parameterNames><CLOSE> ) )?  )";
	public $parameterNames                  = "(?: <parameterName> (?: (?: <COMMA><parameterName> ) )*  )";
	public $deltatoken                      = "(?: \$deltatoken<EQ> (?: <qchar_no_AMP> )+  )";
	public $skiptoken                       = "(?: \$skiptoken<EQ> (?: <qchar_no_AMP> )+  )";
	public $aliasAndValue                   = "(?: <parameterAlias><EQ><parameterValue> )";
	public $nameAndValue                    = "(?: <parameterName><EQ><parameterValue> )";
	public $parameterValue                  = " <arrayOrObject> | <commonExpr>";
	public $customQueryOption               = "(?: <customName> (?: (?: <EQ><customValue> ) )?  )";
	public $customName                      = "(?: <qchar_no_AMP_EQ_AT_DOLLAR> (?: <qchar_no_AMP_EQ> )*  )";
	public $customValue                     = " (?: <qchar_no_AMP> )* ";
	public $complexAnnotationInQuery        = " <annotationInQuery>";
	public $entityAnnotationInQuery         = " <annotationInQuery>";
	public $primitiveAnnotationInQuery      = " <annotationInQuery>";
	public $primitiveColAnnotationInQuery   = " <annotationInQuery>";
	public $context                         = "(?: \#<contextFragment> )";
	public $contextFragment                 = "Collection\(\$ref\) | \$ref | Collection\(Edm\.EntityType\) | Collection\(Edm\.ComplexType\) | (?: <singletonEntity> (?: (?: <navigation> (?: <containmentNavigation> )*  (?: (?: \/<qualifiedEntityTypeName> ) )?  ) )?  (?: <selectList> )?  ) | (?: <qualifiedTypeName> (?: <selectList> )?  ) | (?: <entitySet>\/\$deletedEntity | \/\$link | \/\$deletedLink ) | (?: <entitySet><keyPredicate>\/<contextPropertyPath> (?: <selectList> )?  ) | (?: <entitySet> (?: <selectList> )?  (?: \/\$entity | \/\$delta )?  )";
	public $entitySet                       = "(?: <entitySetName> (?: <containmentNavigation> )*  (?: (?: \/<qualifiedEntityTypeName> ) )?  )";
	public $containmentNavigation           = "(?: <keyPredicate> (?: (?: \/<qualifiedEntityTypeName> ) )? <navigation> )";
	public $navigation                      = "(?:  (?: (?: \/<complexProperty> (?: (?: \/<qualifiedComplexTypeName> ) )?  ) )* \/<navigationProperty> )";
	public $selectList                      = "(?: <OPEN> (?: (?: <selectListItem> (?: (?: <COMMA><selectListItem> ) )*  ) )? <CLOSE> )";
	public $selectListItem                  = " <STAR> | <allOperationsInSchema> | (?:  (?: (?: <qualifiedEntityTypeName> | <qualifiedComplexTypeName>\/ ) )? <qualifiedActionName> | <qualifiedFunctionName> | <selectListProperty> )";
	public $selectListProperty              = " <primitiveProperty> | <primitiveColProperty> | (?: <navigationProperty> | <entityAnnotationInFragment> (?: \+ )?  (?: <selectList> )?  ) | (?: <complexProperty> | <complexColProperty> | <complexAnnotationInFragment> (?: (?: \/<qualifiedComplexTypeName> ) )?  (?: (?: \/<selectListProperty> ) )?  )";
	public $contextPropertyPath             = " <primitiveProperty> | <primitiveColProperty> | <complexColProperty> | (?: <complexProperty> (?: (?:  (?: (?: \/<qualifiedComplexTypeName> ) )? \/<contextPropertyPath> ) )?  )";
	public $qualifiedActionName             = "(?: <namespace>\.<action> )";
	public $qualifiedFunctionName           = "(?: <namespace>\.<function> (?: (?: <OPEN><parameterNames><CLOSE> ) )?  )";
	public $complexAnnotationInFragment     = " <annotationInFragment>";
	public $entityAnnotationInFragment      = " <annotationInFragment>";
	public $commonExpr                      = "(?: <primitiveLiteral> | <arrayOrObject> | <rootExpr> | <firstMemberExpr> | <functionExpr> | <negateExpr> | <methodCallExpr> | <parenExpr> | <castExpr> | <isofExpr> | <notExpr> (?: <addExpr> | <subExpr> | <mulExpr> | <divExpr> | <divbyExpr> | <modExpr> )?  (?: <eqExpr> | <neExpr> | <ltExpr> | <leExpr> | <gtExpr> | <geExpr> | <hasExpr> | <inExpr> )?  (?: <andExpr> | <orExpr> )?  )";
	public $boolCommonExpr                  = " <commonExpr>";
	public $rootExpr                        = "(?: \$root\/(?: <entitySetName><keyPredicate> ) | <singletonEntity> (?: <singleNavigationExpr> )?  )";
	public $firstMemberExpr                 = " <memberExpr> | (?: <inscopeVariableExpr> (?: (?: \/<memberExpr> ) )?  )";
	public $memberExpr                      = " <directMemberExpr> | (?: <optiQualifiedEntityTypeName> | <optiQualifiedComplexTypeName>\/<directMemberExpr> )";
	public $directMemberExpr                = " <propertyPathExpr> | <boundFunctionExpr> | <annotationExpr>";
	public $propertyPathExpr                = "(?: <entityColNavigationProperty> (?: <collectionNavigationExpr> )?  ) | (?: <entityNavigationProperty> (?: <singleNavigationExpr> )?  ) | (?: <complexColProperty> (?: <complexColPathExpr> )?  ) | (?: <complexProperty> (?: <complexPathExpr> )?  ) | (?: <primitiveColProperty> (?: <collectionPathExpr> )?  ) | (?: <primitiveProperty> (?: <primitivePathExpr> )?  ) | (?: <streamProperty> (?: <primitivePathExpr> )?  )";
	public $annotationExpr                  = "(?: <annotationInQuery> (?: <collectionPathExpr> | <singleNavigationExpr> | <complexPathExpr> | <primitivePathExpr> )?  )";
	public $annotationInQuery               = "(?: <AT> (?: (?: <namespace>\. ) )? <termName> (?: (?: <HASH><annotationQualifier> ) )?  )";
	public $annotationInFragment            = "(?: <AT> (?: (?: <namespace>\. ) )? <termName> (?: (?: \#<annotationQualifier> ) )?  )";
	public $annotationQualifier             = " <odataIdentifier>";
	public $inscopeVariableExpr             = " <implicitVariableExpr> | <parameterAlias> | <lambdaVariableExpr>";
	public $implicitVariableExpr            = "\$it | \$this";
	public $lambdaVariableExpr              = " <odataIdentifier>";
	public $collectionNavigationExpr        = "(?:  (?: (?: \/<optiQualifiedEntityTypeName> ) )? <collectionPathExpr> | (?: <keyPredicate> (?: <singleNavigationExpr> )?  ) | (?: <filterExpr> (?: <collectionNavigationExpr> )?  ) )";
	public $singleNavigationExpr            = "(?: \/<memberExpr> )";
	public $filterExpr                      = "(?: \/\$filter<OPEN><boolCommonExpr><CLOSE> )";
	public $complexColPathExpr              = " <collectionPathExpr> | (?: \/<optiQualifiedComplexTypeName> (?: <collectionPathExpr> )?  )";
	public $collectionPathExpr              = "(?: <count> (?: (?: <OPEN><expandCountOption> (?: (?: <SEMI><expandCountOption> ) )* <CLOSE> ) )?  ) | (?: <filterExpr> (?: <collectionPathExpr> )?  ) | (?: \/<anyExpr> ) | (?: \/<allExpr> ) | (?: \/<boundFunctionExpr> ) | (?: \/<annotationExpr> )";
	public $complexPathExpr                 = "(?: \/<directMemberExpr> ) | (?: \/<optiQualifiedComplexTypeName> (?: (?: \/<directMemberExpr> ) )?  )";
	public $primitivePathExpr               = "(?: \/ (?: <annotationExpr> | <boundFunctionExpr> )?  )";
	public $boundFunctionExpr               = " <functionExpr>";
	public $functionExpr                    = "(?:  (?: (?: <namespace>\. ) )? (?: <entityColFunction><functionExprParameters> (?: <collectionNavigationExpr> )?  ) | (?: <entityFunction><functionExprParameters> (?: <singleNavigationExpr> )?  ) | (?: <complexColFunction><functionExprParameters> (?: <complexColPathExpr> )?  ) | (?: <complexFunction><functionExprParameters> (?: <complexPathExpr> )?  ) | (?: <primitiveColFunction><functionExprParameters> (?: <collectionPathExpr> )?  ) | (?: <primitiveFunction><functionExprParameters> (?: <primitivePathExpr> )?  ) )";
	public $functionExprParameters          = "(?: <OPEN> (?: (?: <functionExprParameter> (?: (?: <COMMA><functionExprParameter> ) )*  ) )? <CLOSE> )";
	public $functionExprParameter           = "(?: <parameterName><EQ><parameterAlias> | <parameterValue> )";
	public $anyExpr                         = "(?: any<OPEN><BWS> (?: (?: <lambdaVariableExpr><BWS><COLON><BWS><lambdaPredicateExpr> ) )? <BWS><CLOSE> )";
	public $allExpr                         = "(?: all<OPEN><BWS><lambdaVariableExpr><BWS><COLON><BWS><lambdaPredicateExpr><BWS><CLOSE> )";
	public $lambdaPredicateExpr             = " <boolCommonExpr>";
	public $methodCallExpr                  = " <indexOfMethodCallExpr> | <toLowerMethodCallExpr> | <toUpperMethodCallExpr> | <trimMethodCallExpr> | <substringMethodCallExpr> | <concatMethodCallExpr> | <lengthMethodCallExpr> | <matchesPatternMethodCallExpr> | <yearMethodCallExpr> | <monthMethodCallExpr> | <dayMethodCallExpr> | <hourMethodCallExpr> | <minuteMethodCallExpr> | <secondMethodCallExpr> | <fractionalsecondsMethodCallExpr> | <totalsecondsMethodCallExpr> | <dateMethodCallExpr> | <timeMethodCallExpr> | <roundMethodCallExpr> | <floorMethodCallExpr> | <ceilingMethodCallExpr> | <distanceMethodCallExpr> | <geoLengthMethodCallExpr> | <totalOffsetMinutesMethodCallExpr> | <minDateTimeMethodCallExpr> | <maxDateTimeMethodCallExpr> | <nowMethodCallExpr> | <caseMethodCallExpr> | <boolMethodCallExpr>";
	public $boolMethodCallExpr              = " <endsWithMethodCallExpr> | <startsWithMethodCallExpr> | <containsMethodCallExpr> | <intersectsMethodCallExpr> | <hasSubsetMethodCallExpr> | <hasSubsequenceMethodCallExpr>";
	public $concatMethodCallExpr            = "(?: concat<OPEN><BWS><commonExpr><BWS><COMMA><BWS><commonExpr><BWS><CLOSE> )";
	public $containsMethodCallExpr          = "(?: contains<OPEN><BWS><commonExpr><BWS><COMMA><BWS><commonExpr><BWS><CLOSE> )";
	public $endsWithMethodCallExpr          = "(?: endswith<OPEN><BWS><commonExpr><BWS><COMMA><BWS><commonExpr><BWS><CLOSE> )";
	public $indexOfMethodCallExpr           = "(?: indexof<OPEN><BWS><commonExpr><BWS><COMMA><BWS><commonExpr><BWS><CLOSE> )";
	public $lengthMethodCallExpr               = "(?: length<OPEN><BWS><commonExpr><BWS><CLOSE> )";
	public $matchesPatternMethodCallExpr       = "(?: matchesPattern<OPEN><BWS><commonExpr><BWS><COMMA><BWS><commonExpr><BWS><CLOSE> )";
	public $startsWithMethodCallExpr           = "(?: startswith<OPEN><BWS><commonExpr><BWS><COMMA><BWS><commonExpr><BWS><CLOSE> )";
	public $substringMethodCallExpr            = "(?: substring<OPEN><BWS><commonExpr><BWS><COMMA><BWS><commonExpr><BWS> (?: (?: <COMMA><BWS><commonExpr><BWS> ) )? <CLOSE> )";
	public $toLowerMethodCallExpr              = "(?: tolower<OPEN><BWS><commonExpr><BWS><CLOSE> )";
	public $toUpperMethodCallExpr              = "(?: toupper<OPEN><BWS><commonExpr><BWS><CLOSE> )";
	public $trimMethodCallExpr                 = "(?: trim<OPEN><BWS><commonExpr><BWS><CLOSE> )";
	public $yearMethodCallExpr                 = "(?: year<OPEN><BWS><commonExpr><BWS><CLOSE> )";
	public $monthMethodCallExpr                = "(?: month<OPEN><BWS><commonExpr><BWS><CLOSE> )";
	public $dayMethodCallExpr                  = "(?: day<OPEN><BWS><commonExpr><BWS><CLOSE> )";
	public $hourMethodCallExpr                 = "(?: hour<OPEN><BWS><commonExpr><BWS><CLOSE> )";
	public $minuteMethodCallExpr               = "(?: minute<OPEN><BWS><commonExpr><BWS><CLOSE> )";
	public $secondMethodCallExpr               = "(?: second<OPEN><BWS><commonExpr><BWS><CLOSE> )";
	public $fractionalsecondsMethodCallExpr    = "(?: fractionalseconds<OPEN><BWS><commonExpr><BWS><CLOSE> )";
	public $totalsecondsMethodCallExpr         = "(?: totalseconds<OPEN><BWS><commonExpr><BWS><CLOSE> )";
	public $dateMethodCallExpr                 = "(?: date<OPEN><BWS><commonExpr><BWS><CLOSE> )";
	public $timeMethodCallExpr                 = "(?: time<OPEN><BWS><commonExpr><BWS><CLOSE> )";
	public $totalOffsetMinutesMethodCallExpr   = "(?: totaloffsetminutes<OPEN><BWS><commonExpr><BWS><CLOSE> )";
	public $minDateTimeMethodCallExpr          = "(?: mindatetime<OPEN><BWS><CLOSE> )";
	public $maxDateTimeMethodCallExpr          = "(?: maxdatetime<OPEN><BWS><CLOSE> )";
	public $nowMethodCallExpr                  = "(?: now<OPEN><BWS><CLOSE> )";
	public $roundMethodCallExpr                = "(?: round<OPEN><BWS><commonExpr><BWS><CLOSE> )";
	public $floorMethodCallExpr                = "(?: floor<OPEN><BWS><commonExpr><BWS><CLOSE> )";
	public $ceilingMethodCallExpr              = "(?: ceiling<OPEN><BWS><commonExpr><BWS><CLOSE> )";
	public $distanceMethodCallExpr             = "(?: geo\.distance<OPEN><BWS><commonExpr><BWS><COMMA><BWS><commonExpr><BWS><CLOSE> )";
	public $geoLengthMethodCallExpr            = "(?: geo\.length<OPEN><BWS><commonExpr><BWS><CLOSE> )";
	public $intersectsMethodCallExpr           = "(?: geo\.intersects<OPEN><BWS><commonExpr><BWS><COMMA><BWS><commonExpr><BWS><CLOSE> )";
	public $hasSubsetMethodCallExpr            = "(?: hassubset<OPEN><BWS><commonExpr><BWS><COMMA><BWS><commonExpr><BWS><CLOSE> )";
	public $hasSubsequenceMethodCallExpr       = "(?: hassubsequence<OPEN><BWS><commonExpr><BWS><COMMA><BWS><commonExpr><BWS><CLOSE> )";
	public $caseMethodCallExpr                 = "(?: case<OPEN><BWS><boolCommonExpr><BWS><COLON><BWS><commonExpr><BWS> (?: (?: <COMMA><BWS><boolCommonExpr><BWS><COLON><BWS><commonExpr><BWS> ) )* <CLOSE> )";
	public $parenExpr                          = "(?: <OPEN><BWS><commonExpr><BWS><CLOSE> )";
	public $listExpr                           = "(?: <OPEN><BWS><primitiveLiteral><BWS> (?: (?: <COMMA><BWS><primitiveLiteral><BWS> ) )* <CLOSE> )";
	public $andExpr                            = "(?: <RWS>and<RWS><boolCommonExpr> )";
	public $orExpr                             = "(?: <RWS>or<RWS><boolCommonExpr> )";
	public $eqExpr                             = "(?: <RWS>eq<RWS><commonExpr> )";
	public $neExpr                             = "(?: <RWS>ne<RWS><commonExpr> )";
	public $ltExpr                             = "(?: <RWS>lt<RWS><commonExpr> )";
	public $leExpr                             = "(?: <RWS>le<RWS><commonExpr> )";
	public $gtExpr                             = "(?: <RWS>gt<RWS><commonExpr> )";
	public $geExpr                             = "(?: <RWS>ge<RWS><commonExpr> )";
	public $inExpr                             = "(?: <RWS>in<RWS><listExpr> | <commonExpr> )";
	public $hasExpr                            = "(?: <RWS>has<RWS><enum> )";
	public $addExpr                            = "(?: <RWS>add<RWS><commonExpr> )";
	public $subExpr                            = "(?: <RWS>sub<RWS><commonExpr> )";
	public $mulExpr                            = "(?: <RWS>mul<RWS><commonExpr> )";
	public $divExpr                            = "(?: <RWS>div<RWS><commonExpr> )";
	public $divbyExpr                          = "(?: <RWS>divby<RWS><commonExpr> )";
	public $modExpr                         = "(?: <RWS>mod<RWS><commonExpr> )";
	public $negateExpr                      = "(?: \-<BWS><commonExpr> )";
	public $notExpr                         = "(?: not<RWS><boolCommonExpr> )";
	public $isofExpr                        = "(?: isof<OPEN><BWS> (?: (?: <commonExpr><BWS><COMMA><BWS> ) )? <optionallyQualifiedTypeName><BWS><CLOSE> )";
	public $castExpr                        = "(?: cast<OPEN><BWS> (?: (?: <commonExpr><BWS><COMMA><BWS> ) )? <optionallyQualifiedTypeName><BWS><CLOSE> )";
	public $arrayOrObject                   = " <array> | <object>";
	public $array                           = "(?: <begin_array> (?: (?: <valueInUrl> (?: (?: <value_separator><valueInUrl> ) )*  ) )? <end_array> )";
	public $object                          = "(?: <begin_object> (?: (?: <member> (?: (?: <value_separator><member> ) )*  ) )? <end_object> )";
	public $member                          = "(?: <stringInUrl><name_separator><valueInUrl> )";
	public $valueInUrl                      = " <stringInUrl> | <commonExpr>";
	public $begin_object                    = "(?: <BWS>\{ | \%7B<BWS> )";
	public $end_object                      = "(?: <BWS>\} | \%7D )";
	public $begin_array                     = "(?: <BWS>\[ | \%5B<BWS> )";
	public $end_array                       = "(?: <BWS>\] | \%5D )";
	public $quotation_mark                  = " <DQUOTE> | \%22";
	public $name_separator                  = "(?: <BWS><COLON><BWS> )";
	public $value_separator                 = "(?: <BWS><COMMA><BWS> )";
	public $stringInUrl                     = "(?: <quotation_mark> (?: <charInJSON> )* <quotation_mark> )";
	public $charInJSON                      = " <qchar_unescaped> | <qchar_JSON_special> | (?: <escape><quotation_mark> | <escape> | \/ | \%2F | b | f | n | r | t | (?: u (?: <HEXDIG> ){4}  ) )";
	public $qchar_JSON_special              = " <SP> | \: | \{ | \} | \[ | \]";
	public $escape                          = "\\ | \%5C";
	public $qualifiedTypeName               = " <singleQualifiedTypeName> | (?: Collection<OPEN><singleQualifiedTypeName><CLOSE> )";
	public $optionallyQualifiedTypeName     = " <singleQualifiedTypeName> | (?: Collection<OPEN><singleQualifiedTypeName><CLOSE> ) | <singleTypeName> | (?: Collection<OPEN><singleTypeName><CLOSE> )";
	public $singleQualifiedTypeName         = " <qualifiedEntityTypeName> | <qualifiedComplexTypeName> | <qualifiedTypeDefinitionName> | <qualifiedEnumTypeName> | <primitiveTypeName>";
	public $singleTypeName                  = " <entityTypeName> | <complexTypeName> | <typeDefinitionName> | <enumerationTypeName>";
	public $qualifiedEntityTypeName         = "(?: <namespace>\.<entityTypeName> )";
	public $qualifiedComplexTypeName        = "(?: <namespace>\.<complexTypeName> )";
	public $qualifiedTypeDefinitionName     = "(?: <namespace>\.<typeDefinitionName> )";
	public $qualifiedEnumTypeName           = "(?: <namespace>\.<enumerationTypeName> )";
	public $optiQualifiedEntityTypeName     = "(?:  (?: (?: <namespace>\. ) )? <entityTypeName> )";
	public $optiQualifiedComplexTypeName    = "(?:  (?: (?: <namespace>\. ) )? <complexTypeName> )";
	public $namespace                       = "(?: <namespacePart> (?: (?: \.<namespacePart> ) )*  )";
	public $namespacePart                   = " <odataIdentifier>";
	public $entitySetName                   = " <odataIdentifier>";
	public $singletonEntity                 = " <odataIdentifier>";
	public $entityTypeName                  = " <odataIdentifier>";
	public $complexTypeName                 = " <odataIdentifier>";
	public $typeDefinitionName              = " <odataIdentifier>";
	public $enumerationTypeName             = " <odataIdentifier>";
	public $enumerationMember               = " <odataIdentifier>";
	public $termName                        = " <odataIdentifier>";
	public $odataIdentifier                 = "(?: <identifierLeadingCharacter> (?: <identifierCharacter> ){0, 127}  )";
	public $identifierLeadingCharacter      = " <ALPHA> | _";
	public $identifierCharacter             = " <ALPHA> | _ | <DIGIT>";
	public $primitiveTypeName               = "(?: Edm\.Binary | Boolean | Byte | Date | DateTimeOffset | Decimal | Double | Duration | Guid | Int16 | Int32 | Int64 | SByte | Single | Stream | String | TimeOfDay | (?: <abstractSpatialTypeName> (?: <concreteSpatialTypeName> )?  ) )";
	public $abstractSpatialTypeName         = "Geography | Geometry";
	public $concreteSpatialTypeName         = "Collection | LineString | MultiLineString | MultiPoint | MultiPolygon | Point | Polygon";
	public $primitiveProperty               = " <primitiveKeyProperty> | <primitiveNonKeyProperty>";
	public $primitiveKeyProperty            = " <odataIdentifier>";
	public $primitiveNonKeyProperty         = " <odataIdentifier>";
	public $primitiveColProperty            = " <odataIdentifier>";
	public $complexProperty                 = " <odataIdentifier>";
	public $complexColProperty              = " <odataIdentifier>";
	public $streamProperty                  = " <odataIdentifier>";
	public $navigationProperty              = " <entityNavigationProperty> | <entityColNavigationProperty>";
	public $entityNavigationProperty        = " <odataIdentifier>";
	public $entityColNavigationProperty     = " <odataIdentifier>";
	public $action                          = " <odataIdentifier>";
	public $actionImport                    = " <odataIdentifier>";
	public $function                        = " <entityFunction> | <entityColFunction> | <complexFunction> | <complexColFunction> | <primitiveFunction> | <primitiveColFunction>";
	public $entityFunction                  = " <odataIdentifier>";
	public $entityColFunction               = " <odataIdentifier>";
	public $complexFunction                 = " <odataIdentifier>";
	public $complexColFunction              = " <odataIdentifier>";
	public $primitiveFunction               = " <odataIdentifier>";
	public $primitiveColFunction            = " <odataIdentifier>";
	public $entityFunctionImport            = " <odataIdentifier>";
	public $entityColFunctionImport         = " <odataIdentifier>";
	public $complexFunctionImport           = " <odataIdentifier>";
	public $complexColFunctionImport        = " <odataIdentifier>";
	public $primitiveFunctionImport         = " <odataIdentifier>";
	public $primitiveColFunctionImport      = " <odataIdentifier>";
	public $primitiveLiteral                = " <nullValue> | <booleanValue> | <guidValue> | <dateTimeOffsetValueInUrl> | <dateValue> | <timeOfDayValueInUrl> | <decimalValue> | <doubleValue> | <singleValue> | <sbyteValue> | <byteValue> | <int16Value> | <int32Value> | <int64Value> | <string> | <duration> | <enum> | <binary> | <geographyCollection> | <geographyLineString> | <geographyMultiLineString> | <geographyMultiPoint> | <geographyMultiPolygon> | <geographyPoint> | <geographyPolygon> | <geometryCollection> | <geometryLineString> | <geometryMultiLineString> | <geometryMultiPoint> | <geometryMultiPolygon> | <geometryPoint> | <geometryPolygon>";
	public $primitiveValue                  = " <booleanValue> | <guidValue> | <durationValue> | <dateTimeOffsetValue> | <dateValue> | <timeOfDayValue> | <enumValue> | <fullCollectionLiteral> | <fullLineStringLiteral> | <fullMultiPointLiteral> | <fullMultiLineStringLiteral> | <fullMultiPolygonLiteral> | <fullPointLiteral> | <fullPolygonLiteral> | <decimalValue> | <doubleValue> | <singleValue> | <sbyteValue> | <byteValue> | <int16Value> | <int32Value> | <int64Value> | <binaryValue>";
	public $nullValue                       = "null";
	public $binary                          = "(?: binary<SQUOTE><binaryValue><SQUOTE> )";
	public $binaryValue                     = "(?:  (?:  (?: <base64char> ){4}  )*  (?: <base64b16> | <base64b8> )?  )";
	public $base64b16                       = "(?:  (?: <base64char> ){2} A | E | I | M | Q | U | Y | c | g | k | o | s | w | 0 | 4 | 8 (?: \= )?  )";
	public $base64b8                        = "(?: <base64char>A | Q | g | w (?: \=\= )?  )";
	public $base64char                      = " <ALPHA> | <DIGIT> | \- | _";
	public $booleanValue                    = "true | false";
	public $decimalValue                    = "(?:  (?: <SIGN> )?  (?: <DIGIT> )+  (?: (?: \. (?: <DIGIT> )+  ) )?  (?: (?: e (?: <SIGN> )?  (?: <DIGIT> )+  ) )?  ) | <nanInfinity>";
	public $doubleValue                     = " <decimalValue>";
	public $singleValue                     = " <decimalValue>";
	public $nanInfinity                     = "NaN | \-INF | INF";
	public $guidValue                       = "(?:  (?: <HEXDIG> ){8} \- (?: <HEXDIG> ){4} \- (?: <HEXDIG> ){4} \- (?: <HEXDIG> ){4} \- (?: <HEXDIG> ){12}  )";
	public $byteValue                       = " (?: <DIGIT> ){1, 3} ";
	public $sbyteValue                      = "(?:  (?: <SIGN> )?  (?: <DIGIT> ){1, 3}  )";
	public $int16Value                      = "(?:  (?: <SIGN> )?  (?: <DIGIT> ){1, 5}  )";
	public $int32Value                      = "(?:  (?: <SIGN> )?  (?: <DIGIT> ){1, 10}  )";
	public $int64Value                         = "(?:  (?: <SIGN> )?  (?: <DIGIT> ){1, 19}  )";
	public $string                             = "(?: <SQUOTE> (?: <SQUOTE_in_string> | <pchar_no_SQUOTE> )* <SQUOTE> )";
	public $SQUOTE_in_string                   = "(?: <SQUOTE><SQUOTE> )";
	public $dateValue                          = "(?: <year>\-<month>\-<day> )";
	public $dateTimeOffsetValue                = "(?: <year>\-<month>\-<day>T<timeOfDayValue>Z | (?: <SIGN><hour>\:<minute> ) )";
	public $dateTimeOffsetValueInUrl           = "(?: <year>\-<month>\-<day>T<timeOfDayValueInUrl>Z | (?: <SIGN><hour><COLON><minute> ) )";
	public $duration                           = "(?:  (?: duration )? <SQUOTE><durationValue><SQUOTE> )";
	public $durationValue                      = "(?:  (?: <SIGN> )? P (?: (?:  (?: <DIGIT> )+ D ) )?  (?: (?: T (?: (?:  (?: <DIGIT> )+ H ) )?  (?: (?:  (?: <DIGIT> )+ M ) )?  (?: (?:  (?: <DIGIT> )+  (?: (?: \. (?: <DIGIT> )+  ) )? S ) )?  ) )?  )";
	public $timeOfDayValue                     = "(?: <hour>\:<minute> (?: (?: \:<second> (?: (?: \.<fractionalSeconds> ) )?  ) )?  )";
	public $timeOfDayValueInUrl                = "(?: <hour><COLON><minute> (?: (?: <COLON><second> (?: (?: \.<fractionalSeconds> ) )?  ) )?  )";
	public $oneToNine                       = "1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9";
	public $zeroToFiftyNine                 = "(?: 0 | 1 | 2 | 3 | 4 | 5<DIGIT> )";
	public $year                            = "(?:  (?: \- )? (?: 0 (?: <DIGIT> ){3}  ) | (?: <oneToNine> (?: <DIGIT> ){3, }  ) )";
	public $month                           = "(?: 0<oneToNine> ) | (?: 10 | 1 | 2 )";
	public $day                             = "(?: 0<oneToNine> ) | (?: 1 | 2<DIGIT> ) | (?: 30 | 1 )";
	public $hour                            = "(?: 0 | 1<DIGIT> ) | (?: 20 | 1 | 2 | 3 )";
	public $minute                          = " <zeroToFiftyNine>";
	public $second                          = " <zeroToFiftyNine> | 60";
	public $fractionalSeconds               = " (?: <DIGIT> ){1, 12} ";
	public $enum                            = "(?:  (?: <qualifiedEnumTypeName> )? <SQUOTE><enumValue><SQUOTE> )";
	public $enumValue                       = "(?: <singleEnumValue> (?: (?: <COMMA><singleEnumValue> ) )*  )";
	public $singleEnumValue                 = " <enumerationMember> | <enumMemberValue>";
	public $enumMemberValue                 = " <int64Value>";
	public $geographyCollection             = "(?: <geographyPrefix><SQUOTE><fullCollectionLiteral><SQUOTE> )";
	public $fullCollectionLiteral           = "(?: <sridLiteral><collectionLiteral> )";
	public $collectionLiteral               = " <FIXME>";
	public $geoLiteral                      = " <collectionLiteral> | <lineStringLiteral> | <multiPointLiteral> | <multiLineStringLiteral> | <multiPolygonLiteral> | <pointLiteral> | <polygonLiteral>";
	public $geographyLineString             = "(?: <geographyPrefix><SQUOTE><fullLineStringLiteral><SQUOTE> )";
	public $fullLineStringLiteral           = "(?: <sridLiteral><lineStringLiteral> )";
	public $lineStringLiteral               = "(?: LineString<lineStringData> )";
	public $lineStringData                  = "(?: <OPEN><positionLiteral> (?: (?: <COMMA><positionLiteral> ) )+ <CLOSE> )";
	public $geographyMultiLineString        = "(?: <geographyPrefix><SQUOTE><fullMultiLineStringLiteral><SQUOTE> )";
	public $fullMultiLineStringLiteral         = "(?: <sridLiteral><multiLineStringLiteral> )";
	public $multiLineStringLiteral             = "(?: MultiLineString\( (?: (?: <lineStringData> (?: (?: <COMMA><lineStringData> ) )*  ) )? <CLOSE> )";
	public $geographyMultiPoint                = "(?: <geographyPrefix><SQUOTE><fullMultiPointLiteral><SQUOTE> )";
	public $fullMultiPointLiteral              = "(?: <sridLiteral><multiPointLiteral> )";
	public $multiPointLiteral                  = "(?: MultiPoint\( (?: (?: <pointData> (?: (?: <COMMA><pointData> ) )*  ) )? <CLOSE> )";
	public $geographyMultiPolygon              = "(?: <geographyPrefix><SQUOTE><fullMultiPolygonLiteral><SQUOTE> )";
	public $fullMultiPolygonLiteral            = "(?: <sridLiteral><multiPolygonLiteral> )";
	public $multiPolygonLiteral                = "(?: MultiPolygon\( (?: (?: <polygonData> (?: (?: <COMMA><polygonData> ) )*  ) )? <CLOSE> )";
	public $geographyPoint                     = "(?: <geographyPrefix><SQUOTE><fullPointLiteral><SQUOTE> )";
	public $fullPointLiteral                   = "(?: <sridLiteral><pointLiteral> )";
	public $sridLiteral                        = "(?: SRID<EQ> (?: <DIGIT> ){1, 5} <SEMI> )";
	public $pointLiteral                       = "(?: Point<pointData> )";
	public $pointData                          = "(?: <OPEN><positionLiteral><CLOSE> )";
	public $positionLiteral                    = "(?: <doubleValue><SP><doubleValue> (?: (?: <SP><doubleValue> ) )?  (?: (?: <SP><doubleValue> ) )?  )";
	public $geographyPolygon                   = "(?: <geographyPrefix><SQUOTE><fullPolygonLiteral><SQUOTE> )";
	public $fullPolygonLiteral                 = "(?: <sridLiteral><polygonLiteral> )";
	public $polygonLiteral                     = "(?: Polygon<polygonData> )";
	public $polygonData                        = "(?: <OPEN><ringLiteral> (?: (?: <COMMA><ringLiteral> ) )* <CLOSE> )";
	public $ringLiteral                        = "(?: <OPEN><positionLiteral> (?: (?: <COMMA><positionLiteral> ) )* <CLOSE> )";
	public $geometryCollection                 = "(?: <geometryPrefix><SQUOTE><fullCollectionLiteral><SQUOTE> )";
	public $geometryLineString                 = "(?: <geometryPrefix><SQUOTE><fullLineStringLiteral><SQUOTE> )";
	public $geometryMultiLineString            = "(?: <geometryPrefix><SQUOTE><fullMultiLineStringLiteral><SQUOTE> )";
	public $geometryMultiPoint              = "(?: <geometryPrefix><SQUOTE><fullMultiPointLiteral><SQUOTE> )";
	public $geometryMultiPolygon            = "(?: <geometryPrefix><SQUOTE><fullMultiPolygonLiteral><SQUOTE> )";
	public $geometryPoint                   = "(?: <geometryPrefix><SQUOTE><fullPointLiteral><SQUOTE> )";
	public $geometryPolygon                 = "(?: <geometryPrefix><SQUOTE><fullPolygonLiteral><SQUOTE> )";
	public $geographyPrefix                 = "geography";
	public $geometryPrefix                  = "geometry";
	public $header                          = " <content_id> | <isolation> | <odata_entityid> | <odata_error> | <odata_maxversion> | <odata_version> | <prefer>";
	public $content_id                      = "(?: Content\-ID\:<OWS><request_id> )";
	public $isolation                       = "(?:  (?: OData\- )? Isolation\:<OWS>snapshot )";
	public $request_id                      = " (?: <unreserved> )+ ";
	public $odata_entityid                  = "(?: OData\-EntityID\:<OWS><IRI_in_header> )";
	public $odata_error                     = "(?: OData\-Error\:<OWS><code> )";
	public $odata_maxversion                = "(?: OData\-MaxVersion\:<OWS> (?: <DIGIT> )+ \. (?: <DIGIT> )+  )";
	public $odata_version                   = "(?: OData\-Version\:<OWS>4\.0 (?: <oneToNine> )?  )";
	public $prefer                          = "(?: Prefer\:<OWS><preference> (?: (?: <OWS>\,<OWS><preference> ) )*  )";
	public $preference                      = " <allowEntityReferencesPreference> | <callbackPreference> | <continueOnErrorPreference> | <includeAnnotationsPreference> | <maxpagesizePreference> | <respondAsyncPreference> | <returnPreference> | <trackChangesPreference> | <waitPreference>";
	public $allowEntityReferencesPreference = "(?:  (?: odata\. )? allow\-entityreferences )";
	public $callbackPreference              = "(?:  (?: odata\. )? callback<OWS>\;<OWS>url<EQ_h><DQUOTE><URI><DQUOTE> )";
	public $continueOnErrorPreference       = "(?:  (?: odata\. )? continue\-on\-error (?: (?: <EQ_h><booleanValue> ) )?  )";
	public $includeAnnotationsPreference    = "(?:  (?: odata\. )? include\-annotations<EQ_h><DQUOTE><annotationsList><DQUOTE> )";
	public $annotationsList                 = "(?: <annotationIdentifier> (?: (?: \,<annotationIdentifier> ) )*  )";
	public $annotationIdentifier               = "(?:  (?: <excludeOperator> )? <STAR> | (?: <namespace>\.<termName> | <STAR> ) (?: (?: \#<odataIdentifier> ) )?  )";
	public $excludeOperator                    = "\-";
	public $maxpagesizePreference              = "(?:  (?: odata\. )? maxpagesize<EQ_h><oneToNine> (?: <DIGIT> )*  )";
	public $respondAsyncPreference             = "respond\-async";
	public $returnPreference                   = "(?: return<EQ_h>representation | minimal )";
	public $trackChangesPreference             = "(?:  (?: odata\. )? track\-changes )";
	public $waitPreference                     = "(?: wait<EQ_h> (?: <DIGIT> )+  )";
	public $obs_text                           = "[\x{80}-\x{FF}]";
	public $OWS                                = " (?: <SP> | <HTAB> )* ";
	public $BWS_h                              = " (?: <SP> | <HTAB> )* ";
	public $EQ_h                               = "(?: <BWS_h><EQ><BWS_h> )";
	public $RWS                                = " (?: <SP> | <HTAB> | \%20 | \%09 )+ ";
	public $BWS                                = " (?: <SP> | <HTAB> | \%20 | \%09 )* ";
	public $AT                                 = "\@ | \%40";
	public $COLON                              = "\: | \%3A";
	public $COMMA                              = "\, | \%2C";
	public $EQ                                 = "\=";
	public $HASH                               = "\%23";
	public $SIGN                               = "\+ | \%2B | \-";
	public $SEMI                               = "\; | \%3B";
	public $STAR                               = "\* | \%2A";
	public $SQUOTE                             = "\' | \%27";
	public $OPEN                               = "\( | \%28";
	public $CLOSE                              = "\) | \%29";
	public $URI                             = "(?: <scheme>\:<hier_part> (?: (?: \?<query> ) )?  (?: (?: \#<fragment> ) )?  )";
	public $hier_part                       = "(?: \/\/<authority><path_abempty> ) | <path_absolute> | <path_rootless>";
	public $scheme                          = "(?: <ALPHA> (?: <ALPHA> | <DIGIT> | \+ | \- | \. )*  )";
	public $authority                       = "(?:  (?: (?: <userinfo>\@ ) )? <host> (?: (?: \:<port> ) )?  )";
	public $userinfo                        = " (?: <unreserved> | <pct_encoded> | <sub_delims> | \: )* ";
	public $host                            = " <IP_literal> | <IPv4address> | <reg_name>";
	public $port                            = " (?: <DIGIT> )* ";
	public $IP_literal                      = "(?: \[<IPv6address> | <IPvFuture>\] )";
	public $IPvFuture                       = "(?: v (?: <HEXDIG> )+ \. (?: <unreserved> | <sub_delims> | \: )+  )";
	public $IPv6address                     = "(?:  (?: (?: <h16>\: ) ){6} <ls32> ) | (?: \:\: (?: (?: <h16>\: ) ){5} <ls32> ) | (?:  (?: <h16> )? \:\: (?: (?: <h16>\: ) ){4} <ls32> ) | (?:  (?: (?:  (?: (?: <h16>\: ) )? <h16> ) )? \:\: (?: (?: <h16>\: ) ){3} <ls32> ) | (?:  (?: (?:  (?: (?: <h16>\: ) ){0, 2} <h16> ) )? \:\: (?: (?: <h16>\: ) ){2} <ls32> ) | (?:  (?: (?:  (?: (?: <h16>\: ) ){0, 3} <h16> ) )? \:\:<h16>\:<ls32> ) | (?:  (?: (?:  (?: (?: <h16>\: ) ){0, 4} <h16> ) )? \:\:<ls32> ) | (?:  (?: (?:  (?: (?: <h16>\: ) ){0, 5} <h16> ) )? \:\:<h16> ) | (?:  (?: (?:  (?: (?: <h16>\: ) ){0, 6} <h16> ) )? \:\: )";
	public $h16                                = " (?: <HEXDIG> ){1, 4} ";
	public $ls32                               = "(?: <h16>\:<h16> ) | <IPv4address>";
	public $IPv4address                        = "(?: <dec_octet>\.<dec_octet>\.<dec_octet>\.<dec_octet> )";
	public $dec_octet                          = "(?: 1 (?: <DIGIT> ){2}  ) | (?: 2[\x{30}-\x{34}]<DIGIT> ) | (?: 25[\x{30}-\x{35}] ) | (?: [\x{31}-\x{39}]<DIGIT> ) | <DIGIT>";
	public $reg_name                        = " (?: <unreserved> | <pct_encoded> | <sub_delims> )* ";
	public $path_abempty                    = " (?: (?: \/<segment> ) )* ";
	public $path_absolute                   = "(?: \/ (?: (?: <segment_nz> (?: (?: \/<segment> ) )*  ) )?  )";
	public $path_rootless                   = "(?: <segment_nz> (?: (?: \/<segment> ) )*  )";
	public $segment                         = " (?: <pchar> )* ";
	public $segment_nz                      = " (?: <pchar> )+ ";
	public $pchar                           = " <unreserved> | <pct_encoded> | <sub_delims> | \: | \@";
	public $query                           = " (?: <pchar> | \/ | \? )* ";
	public $fragment                        = " (?: <pchar> | \/ | \? )* ";
	public $pct_encoded                     = "(?: \%<HEXDIG><HEXDIG> )";
	public $unreserved                      = " <ALPHA> | <DIGIT> | \- | \. | _ | \~";
	public $sub_delims                      = "\$ | \& | \' | \= | <other_delims>";
	public $other_delims                    = "\! | \( | \) | \* | \+ | \, | \;";
	public $pchar_no_SQUOTE                 = " <unreserved> | <pct_encoded_no_SQUOTE> | <other_delims> | \$ | \& | \= | \: | \@";
	public $pct_encoded_no_SQUOTE           = "(?: \%0 | 1 | 3 | 4 | 5 | 6 | 8 | 9 | <A_to_F><HEXDIG> ) | (?: \%20 | 1 | 2 | 3 | 4 | 5 | 6 | 8 | 9 | <A_to_F> )";
	public $qchar_no_AMP                    = " <unreserved> | <pct_encoded> | <other_delims> | \: | \@ | \/ | \? | \$ | \' | \=";
	public $qchar_no_AMP_EQ                 = " <unreserved> | <pct_encoded> | <other_delims> | \: | \@ | \/ | \? | \$ | \'";
	public $qchar_no_AMP_EQ_AT_DOLLAR       = " <unreserved> | <pct_encoded> | <other_delims> | \: | \/ | \? | \'";
	public $qchar_no_AMP_SQUOTE             = " <unreserved> | <pct_encoded> | <other_delims> | \: | \@ | \/ | \? | \$ | \=";
	public $qchar_no_AMP_DQUOTE             = " <unreserved> | <pct_encoded_no_DQUOTE> | <other_delims> | \: | \@ | \/ | \? | \$ | \' | \=";
	public $qchar_unescaped                 = " <unreserved> | <pct_encoded_unescaped> | <other_delims> | \: | \@ | \/ | \? | \$ | \' | \=";
	public $pct_encoded_unescaped           = "(?: \%0 | 1 | 3 | 4 | 6 | 7 | 8 | 9 | <A_to_F><HEXDIG> ) | (?: \%20 | 1 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | <A_to_F> ) | (?: \%5<DIGIT> | A | B | D | E | F )";
	public $pct_encoded_no_DQUOTE           = "(?: \%0 | 1 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | <A_to_F><HEXDIG> ) | (?: \%20 | 1 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | <A_to_F> )";
	public $IRI_in_header                   = " (?: <VCHAR> | <obs_text> )+ ";
	public $IRI_in_query                    = " (?: <qchar_no_AMP> )+ ";
	public $ALPHA                           = "[\x{41}-\x{5A}] | [\x{61}-\x{7A}]";
	public $DIGIT                           = "[\x{30}-\x{39}]";
	public $HEXDIG                          = " <DIGIT> | <A_to_F>";
	public $A_to_F                          = "A | B | C | D | E | F";
	public $DQUOTE                          = "\x22";
	public $SP                              = "\x20";
	public $HTAB                            = "\x09";
	public $VCHAR                           = "[\x{21}-\x{7E}]";
	private $replaces = [];

	public function __construct() {
	}

	public function getRegexp(string $regexp) {

		$this->replaces = [];

		preg_match_all("/<([^>]*)>/", $regexp, $matches);

		foreach($matches[1] as $index => $match) {
			$regexp = str_replace($matches[0][$index], sprintf("(?P%s%s)", $matches[0][$index], $this->$match), $regexp);
			$this->replaces[] = $match;
		}

		/*		preg_match_all("/[^P]<([^>]*)>/", $regexp, $matches);

				foreach($matches[1] as $index => $match) {
					if (array_key_exists($match, $this->replaces)) {
						// We already defined group, just use without regexp
						$regexp = str_replace("<{$match}>", sprintf("(?P<%s>)", $match), $regexp);
					} else {
						$regexp = str_replace("<{$match}>", sprintf("(?P<%s>%s)", $match, trim($this->replace($this->$match))), $regexp);
					}
				}*/

		preg_match_all("/[^P]<([^>]*)>/", $regexp, $matches);

		foreach($matches[1] as $index => $match) {
			$regexp = str_replace("<{$match}>", sprintf("(?P<%s>.+?)", $match), $regexp);
		}

		return $regexp;
	}

	private function replace($string) {

		preg_match_all("/[^P]<([^>]*)>/", $string, $matches);

		foreach($matches[1] as $index => $match) {
			if(array_key_exists($match, $this->replaces)) {
				// We already defined group, just use without regexp
				$string = str_replace("<{$match}>", sprintf("(?P<%s>)", $match), $string);
			}
			else {
				$string = str_replace("<{$match}>", sprintf("(?P<%s>%s)", $match, $this->$match), $string);
			}
		}

		return $string;
	}
}
